# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: frontend CI

on:
  push:
    branches: [ "ansible" ]
  pull_request:
    branches: [ "ansible" ]

defaults:
      run:
        working-directory: frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        npm install -g yarn
        yarn install
    - run: npm run build --if-present
    
  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          npm install -g yarn
          yarn install

      - name: Auth AWS
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Destroy terraform
        working-directory: ./
        run: |
          terraform destroy -auto-approve

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        id: terraform_plan
        run: terraform plan -out=tfplan
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform
        
      - name: Login to AWS
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username ${{ secrets.AWS_USER }} --password-stdin ${{ secrets.AWS_PASSWORD }}
          
        working-directory: ./
      - name: Build Docker image
        run: |
          docker compose build frontend

      - name: Version Docker image
        run: docker tag frontend:latest 098041652833.dkr.ecr.us-east-1.amazonaws.com/frontend

      - name: Push Docker image AWS
        run: |
          docker push 098041652833.dkr.ecr.us-east-1.amazonaws.com/frontend

      - name: Setup SSH
        working-directory: ./
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa.pem
          chmod 600 ~/.ssh/id_rsa.pem
      
      - name: Ansible
        id: terraform_output
        working-directory: ./
        run: |
          INSTANCE_IP=$(terraform -chdir=terraform output -raw ec2_public_dns)
          echo "::set-output name=instance_ip::$INSTANCE_IP"
          echo "[servidores]" > hosts
          echo "$INSTANCE_IP" >> hosts
          cat hosts
          ansible-playbook -i hosts ansible.yaml -u ubuntu --private-key ~/.ssh/id_rsa.pem
        shell: bash
        
          
  # destroy:
  #   runs-on: ubuntu-latest
  #   if: failure() # Executar apenas se a etapa deploy falhar
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
        
  #     - name: Set up Terraform for Destroy
  #       uses: hashicorp/setup-terraform@v1
        
  #     - name: Auth AWS
  #       run: |
  #         aws configure set aws_access_key_id ${{ secrets.AWS_ID }}
  #         aws configure set aws_secret_access_key ${{ secrets.AWS_ACCESS_KEY }}
  #         aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}

  #     - name: Terraform Destroy
  #       run: terraform destroy -auto-approve
  #       working-directory: terraform
